# Modify the given path for input and output files at the required positions. The path /home/sutripa/pass/... is mentioned as an example.
rule all:
    input:
        "/home/sutripa/pass/medaka_output"
# Merging of the raw long read sequencing data, rawfile1 and rawfile2. More number of raw files can be added after rawfile2
rule merge:
    input:
        rawfile3="/home/sutripa/pass/fastq_runid_74acb6d6dc4984936237e97b69ec819791dd5188_3.fastq.gz",
        rawfile4="/home/sutripa/pass/fastq_runid_74acb6d6dc4984936237e97b69ec819791dd5188_4.fastq.gz",
        rawfile5="/home/sutripa/pass/fastq_runid_74acb6d6dc4984936237e97b69ec819791dd5188_5.fastq.gz",
        rawfile6="/home/sutripa/pass/fastq_runid_74acb6d6dc4984936237e97b69ec819791dd5188_6.fastq.gz",
        rawfile7="/home/sutripa/pass/fastq_runid_74acb6d6dc4984936237e97b69ec819791dd5188_7.fastq.gz",
        rawfile8="/home/sutripa/pass/fastq_runid_74acb6d6dc4984936237e97b69ec819791dd5188_8.fastq.gz",
        rawfile9="/home/sutripa/pass/fastq_runid_74acb6d6dc4984936237e97b69ec819791dd5188_9.fastq.gz",
        rawfile27="/home/sutripa/pass/fastq_runid_74acb6d6dc4984936237e97b69ec819791dd5188_27.fastq.gz",
        rawfile28="/home/sutripa/pass/fastq_runid_74acb6d6dc4984936237e97b69ec819791dd5188_28.fastq.gz",
        rawfile29="/home/sutripa/pass/fastq_runid_74acb6d6dc4984936237e97b69ec819791dd5188_29.fastq.gz",
    output:
        merged="/home/sutripa/pass/merged.fastq.gz",
    shell:
        "cat {input.rawfile3} {input.rawfile4} {input.rawfile5} {input.rawfile6} {input.rawfile7} {input.rawfile8} {input.rawfile9} {input.rawfile27} {input.rawfile28} {input.rawfile29} > {output.merged}"
# Quality-trimming and filtering of the raw long reads using nanofilt
rule filter:
    input:
        merged="/home/sutripa/pass/merged.fastq.gz"
    output:
        filtered="/home/sutripa/pass/highQuality-reads.fastq"
    shell:
        "gunzip -c {input.merged} | NanoFilt -q 10 --headcrop 40 --tailcrop 10 --minGC 0.33 --maxGC 0.54 > {output.filtered}"
# Production of polished contigs through assembly of cleaned long read sequencing data using flye
rule assembly:
    input:
        filtered="/home/sutripa/pass/highQuality-reads.fastq"
    output:
        touch('/home/sutripa/pass/Flye_res/assembly.fasta'),
        outdir="/home/sutripa/pass/Flye_res",
    shell:
        "flye --nano-raw {input.filtered} --out-dir {output.outdir} --threads 40"
# Binning of the draft assembled genome to check the lineage of the contigs. Pipeline "nanopore_assembly_bin_qc_checkm" gives the statistics of different bins. The appropriate bin name (bin_.2.fa) is written as an output here.
rule binning:
    conda:  "new-env.yaml"
    input:
        assem="/home/sutripa/pass/Flye_res/assembly.fasta",
    output:
        touch('bin.done'),
        "bin_.2.fa"
    params:
        index_prefix='bin_',
    shell:
        "metabat2 -i {input.assem} -o {params.index_prefix}"
# Creating a consensus sequence from individual cleaned long sequencing reads (highQuality-reads.fastq) against a draft assembly in the appropriate bin (example: bin_2.fa, found from "nanopore_assembly_bin_qc_checkm" pipeline)
rule med_consensus:
    input:
        inbin="bin_.2.fa",
        filt_read="/home/sutripa/pass/highQuality-reads.fastq"
    output:
        "/home/sutripa/pass/medaka_output"
    shell:
        "medaka_consensus -i {input.filt_read} -d {input.inbin} -o {output} -t 30"
